) +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, hjust = 1)
) +
labs(
x = "Trip Purpose",
y = "Trip Mode",
title = "Bay Area travel patterns, 2017",
subtitle = "Values are millions of trips per year. Trips are allocated based on 50/50 split\nof origin/destination purpose. Home-allocated trips removed."
)
## percent plot
bay_trips_summary %>%
filter(
!purpose_label %in% c("1. Regular home activities (chores, sleep)", "2. Work from home (paid)")
) %>%
mutate(
trips_perc = trips/sum(trips)
) %>%
filter(
trips_perc > 0.005
) %>%
ggplot(
aes(
x = purpose_label,
y = reorder(mode_label, desc(mode_label))
)
) +
geom_tile(
aes(fill = trips_perc)
) +
geom_text(
aes(label = (trips_perc*100) %>% round()),
color = "white"
) +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, hjust = 1)
) +
labs(
x = "Trip Purpose",
y = "Trip Mode",
title = "Bay Area travel patterns, 2017",
subtitle = "Values are percent of trips per year. Trips are allocated based on 50/50 split\nof origin/destination purpose. Home-allocated trips removed."
)
## trip miles plot
bay_trips_summary %>%
filter(
!purpose_label %in% c("1. Regular home activities (chores, sleep)", "2. Work from home (paid)"),
tripmiles_wt > 1e7/2
) %>%
ggplot(
aes(
x = purpose_label,
y = reorder(mode_label, desc(mode_label))
)
) +
geom_tile(
aes(fill = tripmiles_wt)
) +
geom_text(
aes(label = (tripmiles_wt/1e7) %>% round()),
color = "white",
size = 2
) +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, hjust = 1)
) +
labs(
x = "Trip Purpose",
y = "Trip Mode",
title = "Bay Area travel patterns, 2017",
subtitle = "Values are tens of millions of trip miles per year. Trips are allocated based on 50/50 split\nof origin/destination purpose. Home-allocated trips removed."
)
## trip miles plot - planes filtered out
bay_trips_summary %>%
filter(
mode_label != "Airplane",
!purpose_label %in% c("1. Regular home activities (chores, sleep)", "2. Work from home (paid)")
) %>%
mutate(
tripmiles_perc = tripmiles_wt/sum(tripmiles_wt)
) %>%
filter(
tripmiles_perc > 0.005
) %>%
ggplot(
aes(
x = purpose_label,
y = reorder(mode_label, desc(mode_label))
)
) +
geom_tile(
aes(fill = tripmiles_perc)
) +
geom_text(
aes(label = (tripmiles_perc*100) %>% round()),
color = "white"
) +
theme(
legend.position = "none",
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(angle = 45, hjust = 1)
) +
labs(
x = "Trip Destination",
y = "Trip Mode",
title = "Bay Area travel patterns, 2017",
subtitle = "Values are percent of trip miles per year. Trips are allocated based on 50/50 split\nof origin/destination purpose. Home-allocated trips removed."
)
Sys.setenv(CENSUS_KEY="c7ce771b506b13ca6875d12a179606f8087fa381")
acs_vars_2019_5yr <-
listCensusMetadata(
name = "2019/acs/acs5",
type = "variables"
)
covid_testing <-
st_read("https://opendata.arcgis.com/datasets/d7d10caf1cec43e0985cc90fbbcf91cb_0.geojson")
View(bay_counties)
bay_counties <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME %in% bay_county_names) %>%
st_transform(st_crs(covid_testing))
bay_covid_testing <-
covid_testing %>%
.[bay_counties, ] %>%
filter(status == "Open")
## map of covid test sites
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(
data = bay_covid_testing,
radius = 1,
label = ~name
)
## fileter to santa clara county
scc_covid_testing <-
bay_covid_testing %>%
.[bay_counties %>% filter(NAME == "Santa Clara"), ]
## isochrone
walk_10min <- mb_isochrone(
scc_covid_testing,
profile = "walking",
time = 10
)
mb_access_token("pk.eyJ1IjoiY2hyaXNjb2JlZG8iLCJhIjoiY2t5dWpuOWQwMW5yeTJ1bzdkb2xwNDhzdCJ9.bvKU0wmr5ZptXvmo6vxRkQ", install = T)
## isochrone
walk_10min <- mb_isochrone(
scc_covid_testing,
profile = "walking",
time = 10
)
mb_access_token("pk.eyJ1IjoiY2hyaXNjb2JlZG8iLCJhIjoiY2t5dWpuOWQwMW5yeTJ1bzdkb2xwNDhzdCJ9.bvKU0wmr5ZptXvmo6vxRkQ", install = T)
?renvironment
readRenviron()
readRenviron("~/.Renviron")
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_KEY")
mb_access_token("pk.eyJ1IjoiY2hyaXNjb2JlZG8iLCJhIjoiY2t5dWpuOWQwMW5yeTJ1bzdkb2xwNDhzdCJ9.bvKU0wmr5ZptXvmo6vxRkQ", install = T)
mb_access_token("pk.eyJ1IjoiY2hyaXNjb2JlZG8iLCJhIjoiY2t5dWpuOWQwMW5yeTJ1bzdkb2xwNDhzdCJ9.bvKU0wmr5ZptXvmo6vxRkQ", overwrite =  = T)
mb_access_token("pk.eyJ1IjoiY2hyaXNjb2JlZG8iLCJhIjoiY2t5dWpuOWQwMW5yeTJ1bzdkb2xwNDhzdCJ9.bvKU0wmr5ZptXvmo6vxRkQ", overwrite = T)
## isochrone
walk_10min <- mb_isochrone(
scc_covid_testing,
profile = "walking",
time = 10
)
mb_access_token("pk.eyJ1IjoiY2hyaXNjb2JlZG8iLCJhIjoiY2t5dWpuOWQwMW5yeTJ1bzdkb2xwNDhzdCJ9.bvKU0wmr5ZptXvmo6vxRkQ", install = T)
scc_covid_testing_walk_10min <-
scc_covid_testing %>%
st_drop_geometry() %>%
cbind(walk_10min$geometry) %>%
st_as_sf()
leaflet() %>%
addMapboxTiles(
style_id = "streets-v11",
username = "mapbox"
) %>%
addPolygons(
data = scc_covid_testing_walk_10min,
label = ~name
)
mapview(walk_10min)
## santa clara county block groups
scc_bgs <-
block_groups("CA","085", cb = T, progress_bar = F) %>%
st_transform(26910) %>%
mutate(original_area = st_area(.))
## intersecting isochrones (that are now combined to one geometry) with block groups
scc_bg_isochrone_intersect <-
scc_bgs %>%
st_intersection(
scc_covid_testing_walk_10min %>%
st_union() %>%
st_transform(26910)
) %>%
mutate(
leftover_area = st_area(.),
perc_area = leftover_area / original_area
)
## income data for santa clara block groups
scc_bg_income <-
getCensus(
name = "acs/acs5",
vintage = 2019,
region = "block group:*",
regionin = "state:06+county:085",
vars = "group(B19001)"
) %>%
mutate(cbg = paste0(state,county,tract,block_group)) %>%
select(!c(GEO_ID,state,county,tract,block_group,NAME) & !ends_with(c("EA","MA","M"))) %>%
pivot_longer(
ends_with("E"),
names_to = "variable",
values_to = "estimate"
) %>%
left_join(
acs_vars_2019_5yr %>%
select(name, label),
by = c("variable" = "name")
) %>%
select(-variable) %>%
separate(
label,
into = c(NA,NA,"income"),
sep = "!!"
) %>%
filter(!is.na(income)) %>%
mutate(
income = case_when(
income %in% c("Less than $10,000","$10,000 to $14,999","$15,000 to $19,999","$20,000 to $24,999") ~ "Less than $25,000",
income %in% c("$25,000 to $29,999","$30,000 to $34,999","$35,000 to $39,999","$40,000 to $44,999","$45,000 to $49,999") ~ "$25,000 to $49,999",
income %in% c("$50,000 to $59,999","$60,000 to $74,999") ~ "$50,000 to $74,999",
TRUE ~ income
)
)
##
scc_income <-
scc_bg_income %>%
mutate(income = factor(income, levels = unique(scc_bg_income$income))) %>%
group_by(income) %>%
summarize(estimate = sum(estimate)) %>%
mutate(
perc = estimate/sum(estimate),
group = "Full Population"
)
View(scc_income)
## block group info stats for covid interections of isochrones in Santa Clara
scc_covid_income <-
scc_bg_income %>%
mutate(income = factor(income, levels = unique(scc_bg_income$income))) %>%
left_join(
scc_bg_isochrone_intersect %>%
select(cbg = GEOID, perc_area) %>%
st_drop_geometry()
) %>%
filter(!is.na(perc_area)) %>%
mutate(
estimate = estimate * perc_area
) %>%
group_by(income) %>%
summarize(estimate = sum(estimate)) %>%
mutate(
perc = estimate/sum(estimate),
group = "Population within 10 min. walk of COVID-19 testing"
)
sum(scc_covid_income$estimate)/
sum(scc_income$estimate)
View(scc_covid_income)
## block group info stats for covid interections of isochrones in Santa Clara
scc_covid_income <-
scc_bg_income %>%
mutate(income = factor(income, levels = unique(scc_bg_income$income))) %>%
left_join(
scc_bg_isochrone_intersect %>%
select(cbg = GEOID, perc_area) %>%
st_drop_geometry()
) %>%
filter(!is.na(perc_area)) %>%
mutate(
estimate = estimate * perc_area
) %>%
group_by(income) %>%
summarize(estimate = sum(estimate)) %>%
mutate(
perc = estimate/sum(estimate),
group = "Population within 10 min. walk of COVID-19 testing"
)
## equity analysis pie chart
rbind(scc_income,scc_covid_income) %>%
ggplot(
aes(
x = "",
y = perc,
fill = reorder(income,desc(income))
)
) +
geom_bar(
stat = "identity",
position = position_fill()
) +
geom_text(
aes(label = paste0(round(perc*100),"%")),
position = position_fill(vjust = 0.5)
) +
coord_polar(theta = "y") +
facet_wrap(~ group)  +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = 'bottom'
) +
guides(
fill = guide_legend(nrow=3, byrow=TRUE)
) +
labs(
fill = "Household\nIncome"
)
amenity_preference <- data.frame(
amenity = c("park", "convenience", "restaurant", "supermarket", "library"),
amenity_value = c(
0.8,
0.6,
0.25,
1,
0.7
),
amenity_quantity = c(
2,
5,
30,
1,
1
)
) %>%
mutate(
amenity_decay = -log(0.5)/amenity_quantity
)
mode_preference <- data.frame(
mode = c(
"walking",
"biking",
"driving"
),
mode_value = c(
1,
0.7,
0.5
),
mode_reasonable = c(
15,
10,
20
)
) %>%
mutate(
mode_decay = -log(0.5)/mode_reasonable
)
amenity_preference <- data.frame(
amenity = c("park", "convenience", "restaurant", "supermarket", "library"),
amenity_value = c(
0.9,
0.2,
0.8,
1,
0.3
),
amenity_quantity = c(
2,
1,
40,
4,
1
)
) %>%
mutate(
amenity_decay = -log(0.5)/amenity_quantity
)
mode_preference <- data.frame(
mode = c(
"walking",
"biking",
"driving"
),
mode_value = c(
1,
0.6,
0.5
),
mode_reasonable = c(
10,
15,
20
)
) %>%
mutate(
mode_decay = -log(0.5)/mode_reasonable
)
## joining complete scores
complete_temp <- access_raw %>%
left_join(
amenity_preference,
by = "amenity"
) %>%
left_join(
mode_preference,
by = "mode"
)
## getting isochrones
isochrone <- mb_isochrone(
nfo_cbgs,
profile = "walking",
time = c(5,10,15)
)
## important to save so you dont rerun this and use up credits
saveRDS(isochrones, "nfo_isochrones.rds")
## important to save so you dont rerun this and use up credits
saveRDS(isochrone, "nfo_isochrones.rds")
isochrone <- readRDS("nfo_isochrones.rds")
## create master data sheet- all isochrones
access_raw <- isochrone %>%
st_make_valid() %>%
st_join(smc_pois_filter) %>%
st_drop_geometry() %>%
filter(!is.na(osm_id))
## joining complete scores
complete_temp <- access_raw %>%
left_join(
amenity_preference,
by = "amenity"
) %>%
left_join(
mode_preference,
by = "mode"
)
View(access_raw)
View(mode_preference)
View(purpose_lookup)
## filter to important amenities
pois_filter <- pois %>%
rename(amenity = fclass) %>%
filter(amenity %in% c(
"park",
"convenience",
"restaurant",
"supermarket",
"library"
))
## create master data sheet- all isochrones
access_raw <- isochrone %>%
st_make_valid() %>%
st_join(smc_pois_filter) %>%
st_drop_geometry() %>%
filter(!is.na(osm_id))
## create master data sheet- all isochrones
access_raw <- isochrone %>%
st_make_valid() %>%
st_join(pois_filter) %>%
st_drop_geometry() %>%
filter(!is.na(osm_id))
View(mode_lookup)
View(survey_trip)
view(head(survey_trip))
## making a baseline hypothetical
complete_baseline <- data.frame(
amenity = amenity_preference$amenity %>%
rep(amenity_preference$amenity_quantity)
)
## making a baseline hypothetical
complete_baseline <- data.frame(
amenity = amenity_preference$amenity %>%
rep(amenity_preference$amenity_quantity)
) %>%
left_join(
amenity_preference,
by = "amenity"
) %>%
group_by(amenity) %>%
mutate(
amenity_rank = row_number() - 1
) %>%
ungroup() %>%
mutate(
score = amenity_value * exp(-amenity_rank * amenity_decay) * 0.5
)
View(complete_baseline)
## baseline score
sum(complete_baseline$score)
## making complete modes
complete_modes <- complete_temp %>%
mutate(
score = amenity_value * exp(-anenity_rank * amenity_decay) * exp(-time * mode_decay)
) %>%
group_by(id, mode) %>%
arrange(desc(score)) %>%
filter(!duplicated(osm_id)) %>%
summarize(
score = sum(scores, na.rm = T) / sum(complete_baseline$score)
)
## make a score
complete_total <- complete_temp %>%
mutate(
score = amenity_value * exp(-amenity_rank * amenity_decay) * mode_value * exp(-time * mode_decay)
) %>%
group_by(id) %>%
arrange(desc(score)) %>%
filter(!duplicated(osm_id))
View(nfo_cbgs)
